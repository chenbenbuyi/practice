<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>buyi.stu</groupId>
    <artifactId>xiaoyuan</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.18</version>
            <!--
            compile  如果没有指定，则默认使用该依赖范围。使用此范围的依赖，在编译，测试，运行着三种classpath都有效
            provided 使用此范围的依赖对于编译和测试都有效，但在运行时无效。典型例子就是servlet-api和此处的lombok编译插件依赖
            runtime  运行时依赖范围。使用此范围的依赖对于测试和运行classpath有效，但在编译主代码是无效。典型例子就是JDBC驱动实现
            import： 只支持pom类型的依赖，而且必须在存在于模块pom.xml的dependencyManagement配置区内。 这功能是用来解决pom.xml 只能单继承不能多继承问题，利用组合而不是继承关系引入依赖。最经典的是springboot
            -->
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <!--<scope>test</scope>-->
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.6</version>
        </dependency>

        <!-- java对象布局(Java Object Layout) -->
        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <version>0.10</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.10</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>29.0-jre</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.3.10</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/cglib/cglib -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.3.0</version>
        </dependency>
        <!-- 密码机接口 以下三个依赖都需要 -->
        <!--<dependency>
            <groupId>cipher</groupId>
            <artifactId>atom-cipher-api</artifactId>
            <version>1.0.0</version>
        </dependency>-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.76</version>
        </dependency>
        <!--对象池依赖-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
            <version>2.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.xsocket</groupId>
            <artifactId>xSocket</artifactId>
            <version>2.8.15</version>
        </dependency>
        <!-- rabbitmq 依赖引入-->
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>5.7.2</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--
            利用 maven-install-plugin 插件来安装 jar 包到 maven 本地仓库
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
                <executions>
                    <execution>
                        <id>install-demo-jar</id>
                        <!-- 阶段：设定在 mvn clean 时执行安装,如果设定为 validate，那么就是在 mvn validate 时才安装
                         ps：执行mvn clean 就会在控制台看到以下输出，然后就可以在项目中以pom方式引入jar
                         Installing C:\Software\WorkSpace\practice\lib\bcprov-jdk15on-158.jar to C:\Software\repository\com\bcprov\jdk15on\1.0\jdk15on-1.0.jar
                         Installing C:\Users\admin\AppData\Local\Temp\mvninstall5178866907839008791.pom to C:\Software\repository\com\bcprov\jdk15on\1.0\jdk15on-1.0.pom

                         -->
                        <phase>clean</phase>
                        <configuration>
                            <!-- 路径：这就是刚才添加的 jar 路径 -->
                            <file>${project.basedir}/lib/bcprov-jdk15on-158.jar</file>
                            <!-- 属性：下面的这三个属性，就是后面我们添加依赖时的值 -->
                            <groupId>com.bcprov</groupId>
                            <artifactId>jdk15on</artifactId>
                            <version>1.0</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <!-- 目标：安装外部的 jar 文件到 maven 本地仓库 -->
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>